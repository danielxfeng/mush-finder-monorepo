# generated by datamodel-codegen:
#   filename:  HashTask.schema.json

from __future__ import annotations

from enum import Enum

from pydantic import AnyUrl, BaseModel, ConfigDict, Field, confloat, conint, constr


class Status(Enum):
    queued = 'queued'
    processing = 'processing'
    done = 'done'
    error = 'error'
    not_found = 'not_found'


class ResultItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    category: str = Field(..., description='The category of the task')
    confidence: confloat(ge=0.0, le=1.0) = Field(..., description='Confidence level of the task result')


class Model(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    p_hash: constr(pattern=r'^[A-Fa-f0-9]{64}$', min_length=64, max_length=64) = Field(
        ..., description='Perceptual hash (64-hex) of the image'
    )
    img_url: AnyUrl = Field(..., description='URL of the image')
    status: Status
    result: list[ResultItem]
    processed_at: conint(ge=0, le=9007199254740991) = Field(..., description='Timestamp when the task was processed')
    retry_count: conint(ge=0, le=9007199254740991) = Field(
        ..., description='Number of times the task has been retried'
    )
